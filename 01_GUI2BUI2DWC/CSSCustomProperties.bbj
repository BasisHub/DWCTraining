rem /**
rem  * CSSCustomProperties.bbj
rem  *
rem  * This program facilitates setting custom values for several
rem  * of the DWC's CSS custom properties.  Select a property and
rem  * value from the BBjListEdit controls, or type in your own
rem  * property and value.  Then click the [Set CSS Property to Value]
rem  * button to actually set the value of the property.
rem  *
rem  */


rem If the app is running in BUI, switch it automatically to run in the DWC client instead
rem ================================================================================
if (info(3, 6) = "5") then
    bui! = BBjAPI().getBuiManager()
    url! = bui!.getUrl().replaceAll("apps", "webapp")
    action! = bui!.urlAction(url!)
    bui!.setEndAction(action!)
    release
endif


rem Create the main window, define its ON_CLOSE callback, and set its layout and other CSS
rem ================================================================================
mySysGui! = BBjAPI().openSysGui("X0")
myWindow! = mySysGui!.addWindow("CSS Custom Properties", $00100093$)
myWindow!.setCallback(BBjAPI.ON_CLOSE, "onClose")
gosub ApplyStylesAndLayout


rem Add a child window container for sample controls
myChildWindow! = myWindow!.addChildWindow("Sample Controls", $00109000$, BBjAPI().getSysGui().getAvailableContext())
json! = new JsonObject()
json!.addProperty("width", "100%")
json!.addProperty("padding", "var(--bbj-space)")
json!.addProperty("display", "flex")
json!.addProperty("gap", "var(--bbj-space)")
json!.addProperty("align-items", "center")
myChildWindow!.setStyle("@element", json!.toString())
myEdit! = myChildWindow!.addEditBox("Edit Box")
myCheck! = myChildWindow!.addCheckBox("Check Box")
myCheck!.setSelected(1)
myRadio! = myChildWindow!.addRadioButton("Radio Button")
myRadio!.setSelected(1)
myNav! = myChildWindow!.addNavigator("Navigator")


rem Add a child window container for the CSS Custom Property controls
myChildWindow! = myWindow!.addChildWindow("Set New Values for CSS Custom Properties", $00109000$, BBjAPI().getSysGui().getAvailableContext())
json!.addProperty("align-items", "baseline")
myChildWindow!.setStyle("@element", json!.toString())

myListEditCSSProps! = myChildWindow!.addListEdit(String.join($0a$, cast(Iterable, myVectCssProps!)))
myListEditCSSProps!.setAttribute("label", "CSS Property")
myListEditCSSProps!.setAttribute("expanse", "l")
myListEditCSSProps!.selectIndex(0)
currentProperty$ = myListEditCSSProps!.getText()
myListEditCSSProps!.setCallback(BBjListEdit.ON_EDIT_MODIFY, "OnChangeProperty")

myListEditCSSVals! = myChildWindow!.addListEdit(String.join($0a$, cast(Iterable, myVectCssVals!)))
myListEditCSSVals!.setAttribute("label", "CSS Value")
myListEditCSSVals!.setAttribute("expanse", "l")
myListEditCSSVals!.selectIndex(0)
currentValue$ = myListEditCSSVals!.getText()
myListEditCSSVals!.setCallback(BBjListEdit.ON_EDIT_MODIFY, "OnChangeValue")

myButtonSetCSS! = myChildWindow!.addButton("Set CSS Property to Value")
myButtonSetCSS!.setAttribute("expanse", "l")
myButtonSetCSS!.setCallback(BBjButton.ON_BUTTON_PUSH, "OnButtonPush")

rem Make the window visible and process events
myWindow!.setVisible(1)
process_events


rem Subroutines
rem ================================================================================

rem Exit the program
onClose:
release

rem Apply CSS styles and define the window layout via CSS
ApplyStylesAndLayout:
    rem Set the app's theme to follow the client's operating system's light/dark mode
    myWindow!.setAttribute("@app-theme-switcher", "dark=dark light=light")

    rem Define the main window's layout using CSS Grid
    json! = new JsonObject()
    json!.addProperty("box-sizing", "border-box")
    json!.addProperty("width", "100%")
    json!.addProperty("height", "100%")
    json!.addProperty("padding", "var(--bbj-space-l)")
    json!.addProperty("display", "grid")
    json!.addProperty("gap", "var(--bbj-space-2xl)")
    json!.addProperty("grid-template-columns", "1fr")
    json!.addProperty("justify-items", "stretch")
    json!.addProperty("align-items", "stretch")
    myWindow!.setPanelStyle("@element", json!.toString())

    rem Define several CSS Custom Properties
    myVectCssProps! = BBjAPI().makeVector()
    myVectCssProps!.addItem("--bbj-font-size")
    myVectCssProps!.addItem("--bbj-font-weight")
    myVectCssProps!.addItem("--bbj-color-body-text")
    myVectCssProps!.addItem("--bbj-color-primary-text")
    myVectCssProps!.addItem("--bbj-color-primary")
    myVectCssProps!.addItem("--bbj-navigator-button-background")


    rem Define several CSS Custom Properties
    myVectCssVals! = BBjAPI().makeVector()
    myVectCssVals!.addItem("20px")
    myVectCssVals!.addItem("12px")
    myVectCssVals!.addItem("bold")
    myVectCssVals!.addItem("normal")
    myVectCssVals!.addItem("light")
    myVectCssVals!.addItem("orange")
    myVectCssVals!.addItem("red")
    myVectCssVals!.addItem("green")
    myVectCssVals!.addItem("purple")
    myVectCssVals!.addItem("unset")
return

OnChangeProperty:
    event! = mySysGui!.getLastEvent()
    currentProperty$ = event!.getText()
return

OnChangeValue:
    event! = mySysGui!.getLastEvent()
    currentValue$ = event!.getText()
return


rem Set the CSS Custom Property to the Designated Value
OnButtonPush:
    json! = new JsonObject()
    json!.addProperty(currentProperty$, currentValue$)
    myWindow!.setStyle("@root", json!.toString())
return


rem Declares
declare auto BBjSysGui mySysGui!
declare auto BBjTopLevelWindow myWindow!
declare auto BBjChildWindow myChildWindow!
declare auto BBjListEdit myListEditCSSProps!
declare auto BBjListEdit myListEditCSSVals!
declare auto BBjButton myButtonSetCSS!
declare auto BBjEditModifyEvent event!
declare auto JsonObject json!


rem USE statements
use com.google.gson.JsonObject
