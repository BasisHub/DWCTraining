rem /**
rem  * DWCFlexbox.bbj
rem  * @author ndecker
rem  *
rem  * Overview:
rem  * This demo lets the user experiment with different CSS Flexbox properties to see how they affect the
rem  * layout of a number of colored boxes in a separate display area.
rem  *
rem  * Features:
rem  *  - It uses CSS for layout, so there's no ON_RESIZE event to deal with and everything is always sized/located correctly
rem  *  - It uses the @app-theme-switcher directive to automatically follow the host operating system's light/dark mode setting
rem  *  - It uses the simplified API when adding controls by typically ommitting the ID, x, y, width, and height parameters to make the code more succinct
rem  */


rem If the app is running in BUI, switch it automatically to run in the DWC client instead
if info(3,6)="5" then
    bui! = BBjAPI().getBuiManager()
    url! = bui!.getUrl().replaceAll("apps", "webapp")
    action! = bui!.urlAction(url!)
    bui!.setEndAction(action!)
    release
endif

rem Variable definitions
winW = 300, winH = 500
numBoxes = 15
numVisibleBoxes = 3
wrap! = "nowrap"
direction! = "row"
justification! = "flex-start"
alignment! = "flex-start"
grow! = "none"
gosub init

rem Create the main window
sysgui = unt
open (sysgui)"X0"
sysgui! = bbjapi().getSysGui()
window! = sysgui!.addWindow("DWC Flexbox Demo", $00180093$)
json! = new JsonObject()
json!.addProperty("min-height", "27em")
json!.addProperty("min-width", "40em")
window!.setStyle("@element", json!.toString())


rem Set the app's theme to follow the client's operating system's light/dark mode
window!.setAttribute("@app-theme-switcher", "dark=dark light=light")

rem Set the main window's layout to CSS Grid
json! = new JsonObject()
json!.addProperty("box-sizing", "border-box")
json!.addProperty("display", "grid")
json!.addProperty("grid-template-rows", "minmax(8em, 1fr) auto")
json!.addProperty("padding", "var(--bbj-space)")
json!.addProperty("height", "100%")
window!.setPanelStyle("@element", json!.toString())

rem Create the preview area that lets us visualize the current layout parameters
vectBoxControls! = BBjAPI().makeVector()
sizePct! = str(100/(numVisibleBoxes):"##0.00%")
winDemo! = window!.addChildWindow("Flexbox Layout Preview", $00109000$, sysgui!.getAvailableContext())
winDemo!.setStyle("display", "flex")
winDemo!.setStyle("flex-wrap", wrap!)
winDemo!.setStyle("flex-direction", direction!)
winDemo!.setStyle("align-items", alignment!)
winDemo!.setStyle("justify-content", justification!)
winDemo!.setStyle("background-color", "hsla(var(--bbj-color-primary-h), var(--bbj-color-primary-s), 75%, 0.1)")
winDemo!.setStyle("border", "1px solid var(--bbj-color-primary-50)")
winDemo!.setStyle("border-radius", "var(--bbj-border-radius)")

rem Create a subtle grid for the background so that it's easier to compare justifications
winDemo!.setStyle("background-size", sizePct!)
winDemo!.setStyle("background-image", "radial-gradient(circle, #000000 1px, rgba(0, 0, 0, 0) 2px)")
winDemo!.setStyle("background-image", "linear-gradient(to right, rgba(0, 0, 0, 0.5) 1px, transparent 1px)")
winDemo!.setStyle("background-image", "linear-gradient(90deg, hsl(var(--bbj-color-danger-h), var(--bbj-color-danger-s), 75%) 1px, transparent 1px)")
winDemo!.setStyle("background-position", "-0.5px 0px")

rem Before creating the boxes for the preview window, we start off by defining a base style that's defined
rem as a JsonObject that we modify in the loop to change the box's colors based on the number of boxes visible
boxJson! = new JsonObject()
boxJson!.addProperty("font-size", "var(--bbj-font-size-m)")
boxJson!.addProperty("font-family", "var(--bbj-font-family-mono)")
boxJson!.addProperty("font-weight", "var(--bbj-font-weight-bold)")
boxJson!.addProperty("padding", "10px 20px")
boxJson!.addProperty("margin", "1px")

rem The following centers the text inside the box
boxJson!.addProperty("display", "flex")
boxJson!.addProperty("justify-content", "center")
boxJson!.addProperty("align-content", "center")
boxJson!.addProperty("flex-direction", "column")
boxJson!.addProperty("border-radius", "var(--bbj-border-radius)")

rem Create the boxes and add them to a vector for later retrieval
for i = 0 to numBoxes-1
    hue = int(360/numVisibleBoxes) * i
    backColor! =    "hsla(" + str(hue) + ", 50%, 75%, 0.35)"
    borderColor! =  "hsl("  + str(hue) + ", 50%, 35%)"
    textColor! =    "hsl("  + str(hue) + ", 50%, 25%)"

    boxJson!.addProperty("background", backColor!)
    boxJson!.addProperty("border", "2px solid " + borderColor!)
    boxJson!.addProperty("color", textColor!)
    box! = winDemo!.addStaticText("Box " + str(i+1), $4000$)
    box!.setStyle("@element", boxJson!.toString())
    vectBoxControls!.addItem(box!)
    if (i >= numVisibleBoxes) then box!.setVisible(0)
next


rem Create the window that contains the controls
winOptions! = window!.addChildWindow("Controls", $00109800$, sysgui!.getAvailableContext())
json! = new JsonObject()
json!.addProperty("margin-top", "1.5em")
json!.addProperty("display", "flex")
json!.addProperty("flex-direction", "row")
json!.addProperty("flex-wrap", "wrap")
json!.addProperty("align-items", "stretch")
json!.addProperty("gap", "var(--bbj-space)")
json!.addProperty("overflow", "auto")
winOptions!.setPanelStyle("@element", json!.toString())

rem Create the Options Group with the InputNSpinner to control the number of visible boxes
winConfig! = winOptions!.addChildWindow("Configuration", $00109000$, sysgui!.getAvailableContext())
winConfig!.setStyle("display", "flex")
winConfig!.setStyle("flex-direction", "column")
winConfig!.setStyle("align-items", "stretch")
winConfig!.setStyle("padding", "var(--bbj-space)")
winConfig!.setStyle("gap", "var(--bbj-space, 0.5em)")
winConfig!.setStyle("border", "var(--bbj-border-width) var(--bbj-border-style) var(--bbj-border-color-primary)")
winConfig!.setStyle("border-radius", "var(--bbj-border-radius)")
lbl! = winConfig!.addStaticText("Num. Boxes")
spinBoxes! = winConfig!.addInputNSpinner($$,"#0",3,15)
spinBoxes!.setValue(numVisibleBoxes)
spinBoxes!.setAttribute("expanse", "m")
spinBoxes!.setStyle("max-width", "8em")
btnShowCss! = winConfig!.addButton("Show CSS")
btnShowCss!.setAttribute("expanse", "l")
btnShowCss!.setAttribute("theme", "success")

rem Wrap Group
winWrap! = winOptions!.addChildWindow("Wrap", $00109000$, sysgui!.getAvailableContext())
winWrap!.setStyle("@element", childWinStyle!.toString())
listWrap! = winWrap!.addListBox(java.lang.String.join($0a$, java.util.Arrays.asList(vectWraps!)))
listWrap!.selectIndex(vectWraps!.indexOf(wrap!))

rem Direction Group
winDirection! = winOptions!.addChildWindow("Direction", $00109000$, sysgui!.getAvailableContext())
winDirection!.setStyle("@element", childWinStyle!.toString())
listDirection! = winDirection!.addListBox(java.lang.String.join($0a$, java.util.Arrays.asList(vectDirections!)))
listDirection!.selectIndex(vectDirections!.indexOf(direction!))

rem Justification Group
if (direction! = "row") then title$ = "Justification (H)" else title$ = "Justification (V)"
winJustification! = winOptions!.addChildWindow(title$, $00109000$, sysgui!.getAvailableContext())
winJustification!.setStyle("@element", childWinStyle!.toString())
listJustification! = winJustification!.addListBox(java.lang.String.join($0a$, java.util.Arrays.asList(vectJustifications!)))
listJustification!.selectIndex(vectJustifications!.indexOf(justification!))

rem Alignment Group
if (direction! = "row") then title$ = "Alignment (V)" else title$ = "Alignment (H)"
winAlignments! = winOptions!.addChildWindow(title$, $00109000$, sysgui!.getAvailableContext())
winAlignments!.setStyle("@element", childWinStyle!.toString())
listAligment! = winAlignments!.addListBox(java.lang.String.join($0a$, java.util.Arrays.asList(vectAlignments!)))
listAligment!.selectIndex(vectAlignments!.indexOf(alignment!))

rem Item Flex-Grow Group
winGrow! = winOptions!.addChildWindow("Item flex-grow", $00109000$, sysgui!.getAvailableContext())
winGrow!.setStyle("@element", childWinStyle!.toString())
listGrow! = winGrow!.addListBox(java.lang.String.join($0a$, java.util.Arrays.asList(vectGrows!)))
listGrow!.selectIndex(vectGrows!.indexOf(grow!))


rem Set callbacks and Process Events
window!.setCallback(BBjTopLevelWindow.ON_CLOSE, "onExit")
listWrap!.setCallback(BBjListBox.ON_LIST_CLICK, "onWrapChange")
listDirection!.setCallback(BBjListBox.ON_LIST_CLICK, "onDirectionChange")
listJustification!.setCallback(BBjListBox.ON_LIST_CLICK, "onJustificationChange")
listAligment!.setCallback(BBjListBox.ON_LIST_CLICK, "onAlignmentChange")
listGrow!.setCallback(BBjListBox.ON_LIST_CLICK, "onGrowChange")
spinBoxes!.setCallback(BBjInputNSpinner.ON_SPIN, "onNumBoxesSpin")
btnShowCss!.setCallback(BBjButton.ON_BUTTON_PUSH, "onShowCss")

window!.setVisible(1)
process_events


rem ================================================================================================
rem Subroutines
rem ================================================================================================

rem Handle the user exiting the app
onExit:
release


rem Callback for when the user changes the flexbox wrap
onWrapChange:
    e! = cast(BBjListClickEvent, SysGui!.getLastEvent())
    wrap! = str(vectWraps!.getItem(e!.getSelectedIndex()))
    winDemo!.setStyle("flex-wrap", wrap!)
return


rem Callback for when the user changes the flexbox direction
onDirectionChange:
    e! = cast(BBjListClickEvent, SysGui!.getLastEvent())
    direction! = str(vectDirections!.getItem(e!.getSelectedIndex()))
    winDemo!.setStyle("flex-direction", direction!)
    if (direction!.startsWith("row")) then
        winJustification!.setText("Justification (H)")
        winAlignments!.setText("Alignment (V)")
    else
        winJustification!.setText("Justification (V)")
        winAlignments!.setText("Alignment (H)")
    endif
return


rem Callback for when the user changes the flexbox justification
onJustificationChange:
    e! = cast(BBjListClickEvent, SysGui!.getLastEvent())
    justification! = str(vectJustifications!.getItem(e!.getSelectedIndex()))
    winDemo!.setStyle("justify-content", justification!)
return


rem Callback for when the user changes the flexbox alignment
onAlignmentChange:
    e! = cast(BBjListClickEvent, SysGui!.getLastEvent())
    alignment! = str(vectAlignments!.getItem(e!.getSelectedIndex()))
    winDemo!.setStyle("align-items", alignment!)
return


rem Callback for when the user selects a new box flex-grow value
onGrowChange:
    e! = cast(BBjListClickEvent, SysGui!.getLastEvent())
    grow! = str(vectGrows!.getItem(e!.getSelectedIndex()))
    gosub setBoxGrowFactor
return


rem Define all possible values for directions, justifications, grow values, etc.
init:
    rem Define the wraps
    vectWraps! = BBjAPI().makeVector()
    vectWraps!.addItem("nowrap")
    vectWraps!.addItem("wrap")
    vectWraps!.addItem("wrap-reverse")

    rem Define the directions
    vectDirections! = BBjAPI().makeVector()
    vectDirections!.addItem("row")
    vectDirections!.addItem("row-reverse")
    vectDirections!.addItem("column")
    vectDirections!.addItem("column-reverse")

    rem Define the justifications
    vectJustifications! = BBjAPI().makeVector()
    vectJustifications!.addItem("flex-start")
    vectJustifications!.addItem("flex-end")
    vectJustifications!.addItem("center")
    vectJustifications!.addItem("space-between")
    vectJustifications!.addItem("space-around")
    vectJustifications!.addItem("space-evenly")

    rem Define the Alignments
    vectAlignments! = BBjAPI().makeVector()
    vectAlignments!.addItem("flex-start")
    vectAlignments!.addItem("center")
    vectAlignments!.addItem("flex-end")
    vectAlignments!.addItem("stretch")

    rem Define the item grow values
    vectGrows! = BBjAPI().makeVector()
    vectGrows!.addItem("none")
    vectGrows!.addItem("grow equally")
    vectGrows!.addItem("small outers")
    vectGrows!.addItem("increasing")
    vectGrows!.addItem("decreasing")
    vectGrows!.addItem("pyramid")

    rem Create a style to be applied later to the container windows (Configuration, Wrap, Direction, Justification, Alignment, Item flex-grow)
    childWinStyle! = new JsonObject()
    childWinStyle!.addProperty("display", "flex")
    childWinStyle!.addProperty("flex-direction", "column")
    childWinStyle!.addProperty("flex-grow", "1")
    childWinStyle!.addProperty("align-items", "stretch")
    childWinStyle!.addProperty("padding", "var(--bbj-space)")
    childWinStyle!.addProperty("gap", "var(--bbj-space, 0.5em)")
    childWinStyle!.addProperty("border", "var(--bbj-border-width) var(--bbj-border-style) var(--bbj-border-color-primary)")
    childWinStyle!.addProperty("border-radius", "var(--bbj-border-radius)")
    fieldsetStyle! = new JsonObject()
    fieldsetStyle!.addProperty("font-weight", "var(--bbj-font-weight-semibold)")
    childWinStyle!.addProperty("legend", fieldsetStyle!.toString())
return


rem Callback for when the user changes the number of boxes to show in the visualization area
onNumBoxesSpin:
    e! = cast(BBjSpinEvent, SysGui!.getLastEvent())
    numVisibleBoxes = num(e!.getText())

    rem Change the box colors so that they are always spread across the hue spectrum
    for i = 0 to numBoxes-1
        hue = int(360/numVisibleBoxes) * i
        backColor! =    "hsla(" + str(hue) + ", 50%, 75%, 0.35)"
        borderColor! =  "hsl("  + str(hue) + ", 50%, 35%)"
        textColor! =    "hsl("  + str(hue) + ", 50%, 25%)"

        box! = vectBoxControls!.getItem(i)
        box!.setStyle("background", backColor!)
        box!.setStyle("border", "2px solid " + borderColor!)
        box!.setStyle("color", textColor!)
        vectBoxControls!.addItem(box!)
        if (i >= numVisibleBoxes) then
            box!.setVisible(0)
        else
            box!.setVisible(1)
        endif
    next

    rem Update the background grid pattern to match the number of boxes shown
    sizePct! = str(100/numVisibleBoxes:"##0.00%")

    rem If there are more than 10 boxes, turn off the grid pattern
    if (numVisibleBoxes > 10) then sizePct! = "0%"
    winDemo!.setStyle("background-size", sizePct!)

    rem Reapply the flex-grow properties since the number of boxes has changed
    gosub setBoxGrowFactor
return


rem Sets the flex-grow property for the boxes, and relies on grow! being set to the desired value
setBoxGrowFactor:
    midpoint = numVisibleBoxes/2
    flexGrowSize = 0
    for i = 0 to numVisibleBoxes-1
        box! = cast(BBjStaticText, vectBoxControls!.getItem(i))

        rem Set a grow size for the pyramid shape, where we have to keep track of the index and midpoint
        if (i <= midpoint) then
            flexGrowSize = flexGrowSize + 1
        else
            flexGrowSize = flexGrowSize - 1
        endif

        switch grow!
            case str(vectGrows!.getItem(0))
                rem none
                box!.setStyle("flex-grow", "unset")
                break
            case str(vectGrows!.getItem(1))
                rem grow equally
                box!.setStyle("flex-grow", "1")
                break
            case str(vectGrows!.getItem(2))
                rem small outers
                if (i > 0) and (i < numVisibleBoxes-1) then
                    box!.setStyle("flex-grow", "10")
                else
                    box!.setStyle("flex-grow", "1")
                endif
                break
            case str(vectGrows!.getItem(3))
                rem increasing
                box!.setStyle("flex-grow", str(i))
                break
            case str(vectGrows!.getItem(4))
                rem decreasing
                box!.setStyle("flex-grow", str(numVisibleBoxes-i))
                break
            case str(vectGrows!.getItem(5))
                rem pyramid
                box!.setStyle("flex-grow", str(flexGrowSize))
                break
        swend
    next
return


rem Shows the current CSS settings in effect
onShowCss:
    rem Get the window's styles that are currently in effect
    styles! = winDemo!.getAttribute("style")

    rem Remove styles that don't deal with layout, i.e. border, background, etc.
    styles! = styles!.replaceAll("(\s*)back(.*?);(\s*)", "")
    styles! = styles!.replaceAll("(\s*)border(.*?);(\s*)", "")
    styles! = styles!.replaceAll("(\s*)min-height(.*?);(\s*)", "")

    rem Create the BBj code version
    code! = "use com.google.gson.JsonObject" + $0a$
    code! = code! + "json! = new JsonObject()" + $0a$
    codeString! = styles!.replaceAll(";(\s*)", $0a$)
    while codeString!.indexOf($0a$) > -1
        p1 = codeString!.indexOf(":")
        p2 = codeString!.indexOf($0a$)
        code! = code! + "json!.addProperty(""" + codeString!.substring(0, p1) + """, """ + codeString!.substring(p1+1, p2).trim() + """)" + $0a$
        codeString! = codeString!.substring(p2+1)
    wend
    code! = code! + "myWindow!.setStyle(""@element"", json!.toString())"

    rem Split the original styles into multiple lines
    styles! = styles!.replaceAll(";(\s*)", ";<br>")

    msg! = "<html><p>Listed below are the current layout definitions for the '<b>Flexbox Layout Preview</b>' <a href='https://documentation.basis.cloud/BASISHelp/WebHelp/bbjobjects/Window/bbjchildwindow/bbjchildwindow.htm' target='_blank'>BBjChildWindow</a> that contains the multi-colored boxes. "
    msg! = msg! + "This information was retrieved via the following line of code:</p>"
    msg! = msg! + "<pre><code>styles! = winDemo!.getAttribute(""style"")</code></pre>"

    msg! = msg! + "<p>Note that if you're planning on using these definitions on a <a href='https://documentation.basis.cloud/BASISHelp/WebHelp/bbjobjects/Window/bbjtoplevelwindow/bbjtoplevelwindow.htm' target='_blank'>BBjTopLevelWindow</a>, "
    msg! = msg! + "then you'll want to change the last line of BBj code to set the <i>panel</i> style, as in:</p> "
    msg! = msg! + "<pre><code>myWindow!.<span style='background: var(--bbj-color-warning-50); color: var(--bbj-color-black);'><a href='https://documentation.basis.cloud/BASISHelp/WebHelp/bbjobjects/Window/bbjwindow/BBjWindow_setPanelStyle.htm' target='_blank'>setPanelStyle</a></span>(""@element"", json!.toString())</code></pre>"

    if (grow! = "grow equally") then
        msg! = msg! + "<p>Note that you'll also have to set the CSS&nbsp;<span style='background: var(--bbj-color-warning-50); color: var(--bbj-color-black);'><code>flex-grow: 1;</code></span>&nbsp;style "
        msg! = msg! + "on all the window's contained controls to match the current settings.</p>"
    endif
    msg! = msg! + "<p></p><br><h1>CSS Styles</h1><pre>" + styles! + "</pre>"
    msg! = msg! + "<p></p><br><h1>BBj Code</h1><pre>" + code! + "</pre>"

    rem We're going to modify the default display styles for pre and header elements while we're defining custom HTML
    msg! = msg! + "<style>"
    msg! = msg! + "pre {"
    msg! = msg! + "  border: 1px solid var(--bbj-border-color-gray);"
    msg! = msg! + "  border-radius: var(--bbj-border-radius-m);"
    msg! = msg! + "  padding: var(--bbj-space);"
    msg! = msg! + "  background: var(--bbj-color-gray-95);"
    msg! = msg! + "  font-family: Consolas, var(--bbj-font-family-mono);"
    msg! = msg! + "  font-size: var(--bbj-font-size-l);"
    msg! = msg! + "  line-height: 140%;"
    msg! = msg! + "  -webkit-font-smoothing: subpixel-antialiased;"
    msg! = msg! + "  margin: 0.25em;"
    msg! = msg! + "}"
    msg! = msg! + "h1 {margin: 0 0;}"
    msg! = msg! + "</style>"

    tmp = msgbox(msg!, BBjSysGui.MSGBOX_ICON_INFORMATION, "Layout Information", MODE="max-width=800px,max-height=96vh,theme=primary")
return


rem Declares
declare auto BBjSysGui sysgui!
declare auto BBjTopLevelWindow window!
declare auto BBjChildWindow winOptions!
declare auto BBjChildWindow winDemo!
declare auto BBjChildWindow winConfig!
declare auto BBjChildWindow winDirection!
declare auto BBjChildWindow winJustification!
declare auto BBjChildWindow winAlignments!
declare auto BBjChildWindow winGrow!

declare auto BBjListBox listWrap!
declare auto BBjListBox listDirection!
declare auto BBjListBox listJustification!
declare auto BBjListBox listGrow!
declare auto BBjListBox listAligment!
declare auto BBjInputNSpinner spinBoxes!
declare auto BBjVector vectWraps!
declare auto BBjVector vectDirections!
declare auto BBjVector vectJustifications!
declare auto BBjVector vectAlignments!
declare auto BBjVector vectGrows!
declare auto BBjVector vectBoxControls!

declare auto JsonObject json!
declare auto JsonObject childWinStyle!
declare auto BBjString styles!
declare auto BBjString code!
declare auto BBjString codeString!

rem Use statements
use com.google.gson.JsonObject
